//Category=Security;Authorization
//Product=Keycloak;WSO2;Gluu;ForgeRock
//Standard=OAuth;OIDC;JWT;SAML;WebAuthn
//Maturity level=Complete

= Authorization

Access control is an important aspect for the security in IT application landscapes. There are two different aspects to distinguish: authentication and authorization.

image::authentication-vs-authorization.png[%]

This part deals with the recommendations on authorization, concretely with the general concept and convention. Details how to implement this with specific libraries, or programming-languages are described in the individual stacks of devonfw.

== Authorization

**Definition:**

> Authorization is the verification that an authenticated user is allowed to perform the operation he intends to invoke.

**Clarification of terms:**

For clarification we also want to give a common understanding of related terms that have no unique definition and consistent usage in the wild.

.Security terms related to authorization
[options="header", cols="15%,85%"]
|=======================
|*Term*|*Meaning and comment*
|Principal| An entity that can be authenticated e.g. a user, an application
|Permission|A permission is an object that allows a principal to perform an operation in the system. This permission can be _granted_ (give) or _revoked_ (taken away). Sometimes people also use the term _right_ what is actually wrong as a right (such as the right to be free) can not be revoked.
|Group|We use the term group in this context for an object that contains permissions. A group may also contain other groups. Then the group represents the set of all recursively contained permissions.
|Role|We consider a role as a specific form of group that also contains permissions. A role identifies a specific function of a principal. A user can act in a role.

For simple scenarios a principal has a single role associated. In more complex situations a principal can have multiple roles but has only one active role at a time that he can choose out of his assigned roles. For KISS it is sometimes sufficient to avoid this by creating multiple accounts for the few users with multiple roles. Otherwise at least avoid switching roles at run-time in clients as this may cause problems with related states. Simply restart the client with the new role as parameter in case the user wants to switch his role.
| Access Control | Any permission, group, role, etc., which declares a control for access management.
|=======================

== Suggestions on the access model
For the access model we give the following suggestions:

* Each Access Control (permission, group, role, ...) is uniquely identified by a human readable string.
* We create a unique permission for each use-case.
* We define groups that combine permissions to typical and useful sets for the users.
* We define roles as specific groups as required by our business demands.
* We allow to associate users with a list of Access Controls.
* For authorization of an implemented use case we determine the required permission. Furthermore, we determine the current user and verify that the required permission is contained in the tree spanned by all his associated Access Controls. If the user does not have the permission we throw a security exception and thus abort the operation and transaction.
* We avoid negative permissions, that is a user has no permission by default and only those granted to him explicitly give him additional permission for specific things. Permissions granted can not be reduced by other permissions.
* Technically we consider permissions as a secret of the application. Administrators shall not fiddle with individual permissions but grant them via groups. So the access management provides a list of strings identifying the Access Controls of a user. The individual application itself contains these Access Controls in a structured way, whereas each group forms a permission tree.
* Do not use the pattern that defines non-configured permission as no limitation or in other word all permissions.
    ** [DB1,DB2] -> allow to access DB1 and DB2
    ** [] -> have no permission at all -> good
    ** [] -> have all permissions -> bad


== Naming conventions
As stated above each Access Control is uniquely identified by a human readable string. This string should follow the naming convention:
```
«app-id».«local-name»
```
For Access Control Permissions the `«local-name»` again follows the convention:
```
«verb»«object»
```
The segments are defined by the following table:

.Segments of Access Control Permission ID
[options="header"]
|=============================================
|*Segment* | *Description* | *Example*
|«app-id»|Is a unique technical but human readable string of the application (or microservice). It shall not contain special characters and especially no dot or whitespace. We recommend to use `lower-train-case-ascii-syntax`. The identity and access management should be organized on enterprise level rather than application level. Therefore permissions of different apps might easily clash (e.g. two apps might both define a group `ReadMasterData` but some user shall get this group for only one of these two apps). Using the `«app-id».` prefix is a simple but powerful namespacing concept that allows you to scale and grow. You may also reserve specific «app-id»s for cross-cutting concerns that do not actually reflect a single app e.g to grant access to a geographic region. |`shop`
|«verb»|The action that is to be performed on «object». We use `Find` for searching and reading data. `Save` shall be used both for create and update. Only if you really have demands to separate these two you may use `Create` in addition to `Save`. Finally, `Delete` is used for deletions. For non CRUD actions you are free to use additional verbs such as `Approve` or `Reject`.|`Find`
|«object»|The affected object or entity. Shall be named according to your data-model|`Product`
|=============================================

So as an example `shop.FindProduct` will reflect the permission to search and retrieve a `Product` in the `shop` application. The group `shop.ReadMasterData` may combine all permissions to read master-data from the `shop`. However, also a group `shop.Admin` may exist for the `Admin` role of the `shop` application. Here the `«local-name»` is `Admin` that does not follow the `«verb»«object»` schema.

== Data permissions
In some projects there are demands for permissions and authorization that is dependent on the processed data. E.g. a user may only be allowed to read or write data for a specific region. This is adding some additional complexity to your authorization. If you can avoid this it is always best to keep things simple. However, in various cases this is a requirement. Please clarify the following questions before you make your decisions how to design your access controls:

    * Do you need to separate data-permissions independent of the functional permissions? E.g. may it be required to express that a user can read data from the countries ES and PL but is only permitted to modify data from PL? In such case a single assignment of "country-permissions" to users is insufficient.
    * Do you want to grant data-permissions individually for each application (higher flexibility and complexity) or for the entire application landscape (simplicity, better maintenance for administrators)? In case of the first approach you would rather have access controls like app1.country.GB and app2.country.GB.
    * Do your data-permissions depend on objects that can be created dynamically inside your application?
    * If you want to grant data-permissions on other business objects (entities), how do you want to reference them (primary keys, business keys, etc.)? What reference is most stable? Which is most readable?

If data-permission is the way to go, please checkout our https://github.com/devonfw/devon4j/blob/master/documentation/guide-data-permission.asciidoc[guidance and patterns] how to solve this properly.

== Implementation hints

* https://github.com/devonfw/devon4j/blob/master/documentation/guide-access-control.asciidoc[Access control]
* https://github.com/devonfw/devon4j/blob/master/documentation/guide-data-permission.asciidoc[Data permission]
