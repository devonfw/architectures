apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: demo-quarkus
    app.kubernetes.io/name: demo-quarkus
  name: demo-quarkus
spec:
  # scale default to 2 instances
  replicas: {{ .Values.application.replicas | default 2 }}
  selector:
    matchLabels:
      app: demo-quarkus
  template:
    metadata:
      labels:
        app: demo-quarkus
    spec:
      containers:
        - name: demo-quarkus
          image:  {{ .Values.application.image.registry }}/{{ .Values.application.image.repository }}:{{ .Values.application.image.tag }}
          imagePullPolicy: Always
          env:
            - name: QUARKUS_DATASOURCE_JDBC_URL
              value: jdbc:postgresql://postgresql:{{ .Values.application.database.port }}/demo
            - name: QUARKUS_DATASOURCE_USERNAME
              value: demo
            - name: QUARKUS_DATASOURCE_PASSWORD
              value: demo
          # live & ready probes, using our healthcheck endpoints
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: {{ .Values.application.livenessProbe.url }}
              port: {{ .Values.application.image.port }}
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 3
          ports:
            - containerPort: {{ .Values.application.image.port }}
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: {{ .Values.application.readinessProbe.url }}
              port: {{ .Values.application.image.port }}
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 3
      # we can define init containers, single run jobs that run before our main container does
      # we use them to init database and check that its ready
      initContainers:
        - command:
            - /bin/bash
            - '-c'
            - >-
              psql -tc "SELECT 1 FROM pg_database WHERE datname =
              'demo'" | grep -q 1 | psql -c "CREATE USER
              demo WITH ENCRYPTED PASSWORD 'demo';" -c
              "CREATE DATABASE demo;" -c "GRANT ALL PRIVILEGES
              ON DATABASE demo TO demo;"
          env:
            - name: PGHOST
              value: postgresql
            - name: PGPORT
              value: '{{ .Values.application.database.port }}'
            - name: PGDATABASE
              value: null
            - name: PGUSER
              value: postgres
            - name: PGPASSWORD
              value: postgres
            - name: DISABLE_WELCOME_MESSAGE
              value: 'true'
          image: {{ .Values.application.database.image }}:{{ .Values.application.database.imageTag }}
          name: create-db
        - command:
            - /bin/bash
            - '-c'
            - until pg_isready; do echo waiting for database; sleep 2; done;
          env:
            - name: PGHOST
              value: postgresql
            - name: PGPORT
              value: '{{ .Values.application.database.port }}'
            - name: PGDATABASE
              value: demo
            - name: PGUSER
              value: demo
            - name: PGPASSWORD
              value: demo
            - name: DISABLE_WELCOME_MESSAGE
              value: 'true'
          image: {{ .Values.application.database.image }}:{{ .Values.application.database.imageTag }}
          name: check-db

---

  
kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.application.name }}
  labels:
    app: {{ .Values.application.name }}
spec:
  ports:
    - name: http-port
      protocol: TCP
      port: {{ .Values.application.port }}
      targetPort: {{ .Values.application.image.port }}
  selector:
    app: {{ .Values.application.name }}
  type: ClusterIP