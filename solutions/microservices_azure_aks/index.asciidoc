//Category=Microservice Platforms;Kubernetes
//Product=Azure Kubernetes Service;Azure Container Instances;Azure Red Hat OpenShift
//Platform=Azure
//Maturity level=Complete

:toc: macro
toc::[]
:idprefix:
:idseparator: -

include::../../includes/microservices_problem/index.asciidoc[]

include::../../includes/microservices_platforms/index.asciidoc[]

== Microservice Platforms Solutions - Azure Kubernetes Service
=== Infrastructure
==== Overview

The solution is to use Azure Kubernetes Service and the following platform features regarding. The focus of this chapter is to introduce the relevant features. Recommendations for a concrete setup are given in the next chapter.
The platform features that (can) complement Kubernetes are:

The services that (can) complement Kubernetes:

* Advisory
+
--
Proactive and actionable recommendations from Azure Advisor based on your configuration and usage telemetry as described here.
--
* Provisioning
+
--
Use Bridge to Kubernetes to iteratively develop, test, and debug microservices targeted for AKS clusters. It is a https://azure.microsoft.com/de-de/updates/azure-dev-spaces-is-retiring-on-31-october-2023/[client-only experience] offered through extensions in Visual Studio and Visual Studio Code. See also Provisioning for general aspects and service options for creating pipelines for creating infrastructure.
--
* Compliance
+
--
Use security measures on networking level to avoid public IPs. Combine AKS with additional services to control ingress and outgoing traffic such as Application Gateway or firewalls.

Enforce compliance rules to your cluster and CI/CD pipeline consistently with Azure Policy. Azure Active Directory provides access control with role-based-access-controls (RBAC) and service principals/ managed identities to back RBAC roles. Integration with Azure Security Center can provide security management, intelligent threat detection and actionable recommendations. 
--
* Desaster recovery
+
--
Higher availability using redundancies across availability zones, protecting applications from datacenter failures. Paired region deployment for disaster recovery.
--
* Monitoring
+
--
For infrastructure monitoring see "Monitoring". For infrastructure monitoring specific pages in Azure Monitor exist which will be described here.
--

The picture below summarizes some of the services mentioned above:

image::aks_overview.png[AKS Overview, width=794, height=568]

[.internal]
solution_microservices_azure_aks_infra_detailed_native_setup

=== Application
==== Overview

The solution is to deploy the containerized application to an Azure Kubernetes Service. Focus of that chapter are designing, building, monitoring and deploying containerized applications. Recommendations for a concrete setup are given in the next chapter.

The services that (can) complement Kubernetes:

* Designing
+
--
Each Pod is meant to run a single instance of a given application. If you want to scale your application horizontally (to provide more overall resources by running more instances), you should use multiple Pods, one for each instance. In Kubernetes, this is typically referred to as replication. Replicated Pods are usually created and managed as a group by a workload resource and its controller.

The "one-container-per-Pod" model is the most common Kubernetes use case. A more advanced use case is running multiple containers in a pod that need to work together. A Pod can encapsulate an application composed of multiple co-located containers that are tightly coupled and need to share resources. These co-located containers form a single cohesive unit of service - for example, one container serving data stored in a shared volume to the public, while a separate sidecar container refreshes or updates those files. The Pod wraps these containers, storage resources, and an ephemeral network identity together as a single unit.

Containers have to store information persistently. https://docs.microsoft.com/en-us/azure/aks/concepts-storage[Azure] provides Azure (managed) disks and Azure files as storage options for persistent volumes.
AKS can connect with databases via wrapper objects such as Services  or databases can be directly deployed to Kubernetes. Options for deplyong a database directly to Kubernetes are given below:

** SQL server (Microsoft): Options range from single https://docs.microsoft.com/en-us/sql/linux/tutorial-sql-server-containers-kubernetes?view=sql-server-ver15[sql server] to https://docs.microsoft.com/en-us/sql/linux/tutorial-sql-server-containers-kubernetes-dh2i?view=sql-server-ver15[high availability] with failover groups. In both cases MS provides containers that contain sql server.
** Third party options such as https://portworx.com/blog/ha-postgresql-azure-aks/[PostgreSQL]
--
* Configuration
+
--
Configmaps are useful to store non-critical data in key-value pair format. They can also be used to inject env vars into pods. Secrets are useful to store sensitive data in key value pair format. They can also be used to inject env vars into pods. You can optionally specify how much of each resource a container needs. The most common resources to specify are CPU and memory (RAM).
--
* Compliance
+
--
A https://kubernetes.io/docs/tasks/configure-pod-container/security-context/[security context] defines privilege and access control settings for a pod. Examples are: 

** Discretionary Access Control: Permission to access an object, like a file, is based on user ID (UID) and group ID (GID).
** Security Enhanced Linux (SELinux): Objects are assigned security labels.
** Running as privileged or unprivileged.
** Linux Capabilities: Give a process some privileges, but not all the privileges of the root user.
** AppArmor: Use program profiles to restrict the capabilities of individual programs.
** AllowPrivilegeEscalation: Controls whether a process can gain more privileges than its parent process.
** readOnlyRootFilesystem: Mounts the container's root filesystem as read-only.

Disks used in your AKS cluster can by encrypted by using your own keys through Azure Key Vault.

See building for additional security measures when containers are built.
--
* Building (CI part of provisioning)
+
--
Building containers includes the following steps:

1. Building the container image(s)
2. Pushing the image(s) to the registry

Provisioning tools such as Azure DevOps and Gitub Actions provide special docker tasks/ activities to build images. Pushing to registries is also supported. The following additional features can be used/ should be considered from security perspective:

** Each time a *base image is updated*, you should also update any downstream container images. Integrate this build process into validation and deployment pipelines such as Azure Pipelines or Jenkins. These pipelines make sure that your applications continue to run on the updated based images. Once your application container images are validated, the AKS deployments can then be updated to run the latest, secure images. Azure Container Registry Tasks can also https://docs.microsoft.com/en-us/azure/aks/operator-best-practices-container-image-management[automatically update container images] when the base image is updated.
**  https://docs.microsoft.com/en-us/azure/aks/operator-best-practices-container-image-management[A container security scan] can be included in the *pipelines as quality gate* by using tools like tools such as Twistlock or Aqua.
** The https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/content-trust?view=azure-devops[provisioning services support] Docker Content Trust (DCT). Docker Content Trust (DCT) are digital signatures for data sent to and received from remote Docker registries. These signatures allow client-side or runtime verification of the integrity and publisher of specific image tags.
--
* Deployment (CI part of provisioning)
+
--
The term "Deployment" refers to the process that triggers a deployment in Kubernetes whereas a Kubernetes deployment refers to the Kubernets deployment resource. A kubernetes deployment resource is the standard controller for manipulating pods which in turn host the container workloads.

A deployment is triggered by the provisioning pipeline.  Depending on the scope a deployment goes beyond the a kubernetes deployment that results in a Kubernetes deployment resource. The various steps across various scenarios can be generalized as follows:

1. Pre-Kubernetes Deployment steps
2. Kubernetes Deployment
Azure provisioning services provide ways to trigger with native kubernetes means such as manifests by supporting special tasks/ activties. However, this results in quite a number of files you have to maintain. Additional tools like https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/helm-deploy?view=azure-devops[helm] (see variation) provide better support.
3. Post-Kubernetes Deployment steps

The most complex deployment scenario is a rolling update with breaking database changes. In that case pre and post Kubernetes deployment steps are required to https://stackoverflow.com/questions/48877182/kubernetes-rolling-deployments-and-database-migrations/48880687[handle the breaking database changes]. Such an update requires targeting specific components e.g. with a certain version. Labels are key/value pairs that are attached to objects, such as pods. They help in filtering out specific objects. Using a Selector, the client/user can identify a set of objects. Annotations are used to attach arbitrary non-identifying metadata to objects.

The basic idea is to break down the breaking database change into multiple non-breaking steps. The https://stackoverflow.com/questions/48877182/kubernetes-rolling-deployments-and-database-migrations/48880687[steps below] refer to a renaming of a column:

1. Add a db migration that inserts the new column
2. Change the app so that all writes go to the old and new column
3. Run a task that copies all values from the old to the new column
4. Change the app that it reads from the new column
5. Add a migration that remove the old column
--
* Monitoring
+
--
Application logs can help in understanding the activities and status of the application. The logs are particularly useful for debugging problems and monitoring cluster activity. Monitoring applications can be done by storing logs and studying the application’s metrics.

Tools like Prometheus-Grafana are popular as they make the management of metrics very easy. Very often, sidecar containers are used as metrics exporters of the main application container.

By https://docs.microsoft.com/en-us/azure/azure-monitor/containers/container-insights-prometheus-integration[integrating with Azure Monitor], a Prometheus server is not required. You just need to expose the Prometheus metrics endpoint through your exporters or pods (application), and the containerized agent for Container insights can scrape the metrics for you.

image::mon_cnt_insights.png[alt=Monitoring Container Insights,width=1706, height=632]
--

==== Variations

The following additional extra tools can be used in conjunction with Kubernetes:

* Deployment
+
--
Instead of having to write separate YAML files for each application manually, you can simply create a Helm chart and let Helm deploy the application to the cluster for you. Helm charts contain templates for various Kubernetes resources that combine to form an application. 

image::helm_chart_example.png[alt=Helm chart example]

A Helm chart can be customized when deploying it on different Kubernetes clusters. Helm charts can be created in such a way that environment or deployment-specific configurations can be extracted out to a separate file so that these values can be specified when the Helm chart is deployed. The snippet below shows a template using placeholders to refer to the values in values.yaml:
```YAML
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.postgres.name }}
  labels:
    app: {{ .Values.postgres.name }}
    group: {{ .Values.postgres.group }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.postgres.name }}
      ...
```

--
* Compliance
+
--
For security reasons and improvement of Helm charts, it is useful to make use of at least one Helm linting tool to ensure your deployments are valid and versioned correctly.

Why choosing Polaris as Linting Tool: For helm chart linting, there are several tools like Polaris, kube-score or config-lint available. With Polaris, checks and rules are already given by default, whereby other tools need a lot of custom rules configuration and are therefore more complex to setup. Polaris runs a variety of checks to ensure that Kubernetes pods and controllers are configured using best practices, helping to avoid problems in the future. Polaris can be either installed inside a cluster or as a command-line tool to analyze Kubernetes manifests statically.
--
* Configuration
+
--
See under infrastructure.
--

==== When to use

When you want to deploy containerized applications to Azure Kubernetes Service.

== Credits

image::ms_guild_logo.png[MS Guild Logo, width=160, height=75, align=right, link="https://forms.office.com/Pages/ResponsePage.aspx?id=Wq6idgCfa0-V7V0z13xNYal7m2EdcFdNsyBBMUiro4NUNllHQTlPNU9QV1JRRjk3TTAwVUJCNThTRSQlQCN0PWcu"]
