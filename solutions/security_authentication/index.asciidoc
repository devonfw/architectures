//Category=Security;Authentication
//Product=Keycloak;WSO2;Gluu;ForgeRock
//Standard=OAuth;OIDC;JWT;SAML;WebAuthn
//Maturity level=Complete

= Authentication

== Authentication

Access control is an important aspect for the security in IT application landscapes. There are two different aspects to distinguish:

* Authentication (Who tries to access?)
* Authorization (Is the one accessing allowed to do what he wants to do?)

This part deals with the recommendations on authentication.

== You have the following problem to be solved
In large IT landscapes it is a highly recommended best-practice to centralize your authentication. Implemeting the actual authentication into every application or service is therefore considered as an anti-pattern. Instead we suggest to use a central identity and access management (IAM) solution based on established products (e.g. https://www.keycloak.org/[Keycloak]).

=== Using a central IAM
When using a central IAM, the user is redirected to the identity provider (IdP) when trying to access the application. The IdP returns a login page where the user can log in. After confirming that the user can access the application, the IdP returns an access token that the user can use to access the application. We recommend the use https://jwt.io/[JSON Web Tokens] (JWT) within the authentication flow, as this is a widely used method in modern web applications and RESTful services.

Participants integrate with the identity provider using protocols such as https://openid.net/connect/[OpenId Connect], https://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html[SAMLv2] or https://webauthn.io/[WebAuthn]. The original incoming request is forwarded to the actual service and the token is added as a bearer token via HTTP header according to https://oauth.net/[OAuth] standard. In the application, the token can be validated according to the user's roles and groups.

image::authentication_flow.png[Abstract authentication flow]

Typically, a gateway is placed in front of the IdP and applications to act as a reverse proxy for the actual service. Incoming traffic goes through the gateway and the gateway is then responsible for authentication through integration with the identity provider. In this way, multiple applications and services can be deployed without implementing integration between the service itself and the IdP. The access token can be validated only on the gateway side or additionally passed to the application for further validation.

Services are implemented stateless and only accept requests with valid JWT from gateway. When one of your services invokes another service it simply passes on the JWT via HTTP header. This way all sub-sequent invocations happen within the context and with the permissions of the initial user.

The gateway should also act as a portal that integrates the UIs of your microservices so that end users do not notice which UI comes from which service, but have the user experience (UX) of a single monolithic UI.

=== Which protocol to use
We suggest using OIDC as the protocol for integration with the identity provider. It is easy to integrate and works well with mobile and web-based applications. OIDC uses JSON tokens and RESTful APIs to provide the authentication information. Therefore, it is a much more lightweight solution than SAML, which uses an XML and SOAP-based approach.

=== Values for the customer
* all services are independent and decoupled from the actual authentication and IAM
* authentication can be changed without touching any of your services, only changes need to be made to your gateway(s)
* in large and complex IT landscapes, there may be different requirements for authentication via different channels (e.g. to authenticate internal users via SPNEGO and external users via WebAuthn). In such a case, you can simply set up several variants of your gateway for each channel with different endpoint URLs.

=== Conventions

We recommend the following conventions:

* define a short but meaningful unique alphanumeric identifier for each of your services (`app-id`)
* establish a clear URL scheme for accessing your apps, e.g. `https://gateway.company.com/«app-id»/`
* use a cloud infrastructure platform that allows to manage an overlay network so you can configure loadbalancers or even a https://platform9.com/blog/kubernetes-service-mesh-a-comparison-of-istio-linkerd-and-consul/[service-mesh] mapping your service entry points to a consistent URL schema such as `https://«app-id»:8443/«app-id»/`
* this way you do not need any configuration or business knowledge inside your gateway as the routing can be implemented fully generic
* use `app-id.` as a prefix to all permission groups/roles specific to your service to avoid name clashing in your central IAM

=== Implementation hints
* A Helm chart for the deployment of Keycloak in your Kubernetes environment can be found in the https://github.com/devonfw/solutions/blob/master/solutions/security_authentication/helm[GitHub repository of the devonfw solutions browser]
* The https://github.com/devonfw-sample/devon4quarkus-reference/tree/master/documentation[devon4quarkus-product reference application] provides a documentation on how to integrate Keycloak into your Quarkus application to implement security mechanisms

=== Related documentations

* https://github.com/devonfw/devon4j/blob/master/documentation/guide-access-control.asciidoc#authentication[devon4j authentication guide]
* https://github.com/devonfw/devon4j/blob/master/documentation/guide-jwt.asciidoc[devon4j JWT guide]
* https://oauth.net/2/[OAuth 2.0]
* https://openid.net/connect/[OpenID Connect]
* https://www.keycloak.org/docs/latest/securing_apps/[Keycloak's securing apps guide]



=== IAM solutions

* https://www.keycloak.org/[Keycloak]
* https://is.docs.wso2.com/en/latest/[WSO2]
* https://gluu.org/[Gluu Server]
* https://backstage.forgerock.com/docs/[ForgeRock]
* ...
