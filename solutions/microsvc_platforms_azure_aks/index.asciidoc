//Platform=Azure
//Maturity level=Initial

== Azure Microservice Platforms Solution AKS
=== Infrastructure
==== Overview

The solution is to use Azure Kubernetes Service and the following platform features regarding. The focus of this chapter is to introduce the relevant features. Recommendations for a concrete setup are given in the next chapter.
The platform features that (can) complement Kubernetes are:

The services that (can) complement Kubernetes:

* Advisory
+
--
Proactive and actionable recommendations from Azure Advisor based on your configuration and usage telemetry as described here.
--
* Provisioning
+
--
Use Bridge to Kubernetes to iteratively develop, test, and debug microservices targeted for AKS clusters. It is a https://azure.microsoft.com/de-de/updates/azure-dev-spaces-is-retiring-on-31-october-2023/[client-only experience] offered through extensions in Visual Studio and Visual Studio Code. See Provisioning for general aspects how you can handle provisioning in Azure such as creating pipelines for creating infrastructure.
--
* Compliance
+
--
Use security measures on networking kevel to avoid public IPs. Combine AKS with additional services to control ingress and outgoing traffic such as Application Gateway or firewalls.

Disks used in your AKS cluster can by encrypted by using your own keys through Azure Key Vault.

Enforce compliance rules to your cluster and CI/CD pipeline consistently with Azure Policy. Azure Active Directory provides access control with role-based-access-controls (RBAC) and service principals/ managed identities to back RBAC roles. Integration with Azure Security Center can provide security management, intelligent threat detection and actionable recommendations. 
--
* Desaster recovery
+
--
Higher availability using redundancies across availability zones, protecting applications from datacenter failures. Paired region deployment for disaster recovery.
--
* Monitoring
+
--
For infrastructure monitoring see "Monitoring". For infrastructure monitoring specific pages in Azure Monitor exist which will be described here.
--

The features that (can) complement the resources to be deployed are:

* Provisioning
+
--
Application build pipelines need to build container images and store them in a registry. The native container registry service is Azure Container Registry.
--

==== Detailed Native Setup

AKS comes with the following additional features regarding the *orchestration platform*: 

* Scaling
+
--
Virtual nodes enable network communication between pods that run in Azure Container Instances (ACI) and the AKS cluster. To provide this communication, a virtual network subnet is created and delegated permissions are assigned. Virtual nodes only work with AKS clusters created using advanced networking (Azure CNI). By default, AKS clusters are created with basic networking (kubenet). This implementation allows fast scaling of services for unpredictable traffic.

image::virtual_nodes.png[alt=Virtual Nodes,width=1858, height=994]

--
* Compliance
+
--
*Kubernet-dashboard* has been used in the past for attacks. Either disable it or mitigate the attack potential by adding token security.

AKS used to rely on *service principals* (SP), which are technical principals in AAD. They came with some challenges like being stored on the nodes and the need to rotate them. SPs allowed an AKS cluster to interact with other Azure resources. Managed service identity (MSI) is a wrapper for SP, it provides auto rotation and if its system assigned then it has the same life cycle as the resource. AKS uses several managed identities for built-in services and add-ons as described https://docs.microsoft.com/en-us/azure/aks/use-managed-identity[here]:

** Control plane
** Agent pool
** Pod identity (Preview as of 13.10.2021)

*Role based access control* (RBAC) can be used for Authentication and Authorization. Predefined roles are: Cluster admin/ Cluster user = developer. Setting it up requires (1) setting up a cluster role and (2) binding the Cluster Role to a user/ cluster identity.

*Operating system security patches* are automatically pushed to your nodes on a nightly schedule. AKS uses a security hardened operating system image which complies to CIS benchmark.

*Network security* can be used to reduce attack potential. A private AKS is located inside a VNET and only exposes the ingress controller with a public IP. Interact with the Kubernetes API server as a private endpoint using Azure Private Link. To improve cluster security and minimize attacks, the API server should only be accessible from a limited set of IP address ranges.

*Azure policies* offer built-in policies to secure pods and built-in initiatives which map to pod security policies. They replace pod security policies and work with gatekeeper/ Open Policy Agent (OPA) under the hood as described here. In Kubernetes, Admission Controllers enforce semantic validation of objects during create, update, and delete operations. With Open Policy Agent (OPA) you can enforce custom policies on Kubernetes objects without recompiling or reconfiguring the Kubernetes API server.

The principle of least privilege should be applied to how traffic can flow between pods in an Azure Kubernetes Service (AKS) cluster. Let's say you likely want to block traffic directly to back-end applications. The *Network Policy feature* in Kubernetes lets you define rules for ingress and egress traffic between pods in a cluster. https://docs.microsoft.com/en-us/azure/aks/use-network-policies[Two options] for implementation exist:

** Azure's own implementation, called Azure Network Policies.
** Calico Network Policies, an open-source network and network security solution founded by Tigera.
--
* Provisioning
+
--
Environments can be created by logical isolation (namespaces) or phyiscal (multiple clusters). Logical is usually recommended for non dev/test whereas pysical for prod.
--

AKS comes with the following additional features regarding the *resources to be deployed*: 

* Provisioning
+
--
The following https://docs.microsoft.com/en-us/azure/aks/operator-best-practices-container-image-management[best practises] are recommended:

** A container security scan can be included in the *pipelines as quality gate* by using tools like tools such as Twistlock or Aqua.

** Each time a *base image is updated*, you should also update any downstream container images. Integrate this build process into validation and deployment pipelines such as Azure Pipelines or Jenkins. These pipelines make sure that your applications continue to run on the updated based images. Once your application container images are validated, the AKS deployments can then be updated to run the latest, secure images. Azure Container Registry Tasks can also automatically update container images when the base image is updated. With this feature, you build a few base images and keep them updated with bug and security fixes.
--

==== Variations

The following additional extra tools can be used in conjunction with Kubernetes:

* Extensions orchestration platform
+
--
DAPR is a distributed framework that provides application services to applications such as publish subscribe as described here.
Open Service Mesh (OSM) add-on for Azure Kubernetes Service (AKS) is now available in public preview as of 10.09.2021. OSM implements Service Mesh Interface to provide the most common service mesh features as described here.
--
* Deployment
+
--
Instead of having to write separate YAML files for each application manually, you can simply create a Helm chart and let Helm deploy the application to the cluster for you. Helm charts contain templates for various Kubernetes resources that combine to form an application. A Helm chart can be customized when deploying it on different Kubernetes clusters. Helm charts can be created in such a way that environment or deployment-specific configurations can be extracted out to a separate file so that these values can be specified when the Helm chart is deployed. For example, you need not have separate charts for deploying an application in development, staging, and production environments.
--
* Compliance
+
--
For security reasons and improvement of Helm charts, it is useful to make use of at least one Helm linting tool to ensure your deployments are valid and versioned correctly.

Why choosing Polaris as Linting Tool: For helm chart linting, there are several tools like Polaris, kube-score or config-lint available. With Polaris, checks and rules are already given by default, whereby other tools need a lot of custom rules configuration and are therefore more complex to setup. Polaris runs a variety of checks to ensure that Kubernetes pods and controllers are configured using best practices, helping to avoid problems in the future. Polaris can be either installed inside a cluster or as a command-line tool to analyze Kubernetes manifests statically.
--
* Configuration
+
--
Tools for accessing sensitive information:

** *FlexDriver:* Meet rigorous compliance requirements with secrets centrally stored outside of clusters. Access application-specific keys, secrets, and certificates natively within Kubernetes from Azure Key Vault. Mount Azure Key Vault stores via flexvolume driver https://github.com/Azure/kubernetes-keyvault-flexvol

** *Azure Key Vault to Kubernetes (akv2k8s):* Used for our applications, to make Azure Key Vault secrets, certificates and keys available to use in a secure way. The goals of Azure Key Vault to Kubernetes are to avoid a direct program dependency for getting secrets, secure and low risk to transfer Azure Key Vault secrets and transparently inject secrets into applications. Per default secrets, configurations and certificates can be easily read and accessed by users in Kubernetes and access to them can only be restricted by setting access rights. This will be avoided and is a huge benefit of using akv2k8s with a simple setup of Azure Key Vault and the option to set more detailed restrictions and configurations.

** https://github.com/Azure/secrets-store-csi-driver-provider-azure/[secrets-store-csi-driver] better rated than (akv2k8s). If you want to get from multiple keyvaults secrets using multiple identities you had to have multiple instances of akv2k8s running. And secret store csi driver is more mature in general.

Tools for synchronizing configuration:

** ArgoCD: Continuous Delivery for Kubernetes: ArgoCD is a leader developed by Intuit and synchronizes changes in the code of applications, photos and cluster definitions, so the Git - repository , to the cluster. The solution is open source software, kept relatively simple and is one of the most important and oldest tools on the market.
** Flux: Integration of Flux CD into the workflow: Flux basically does the same job as ArgoCD, i.e. synchronizes the repository and cluster in the course of continuous delivery. Flux is also open source and kept simple - the special thing: It comes from the GitOps inventor Weaveworks.
--

=== When to use

When you need orchestration support due to a higher number of microservices. If you start with a single service then Function App reduces greatly the complexity. You can still later on move to Kubernetes by containerizing your function app code.