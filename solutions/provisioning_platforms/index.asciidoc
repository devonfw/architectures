//Category=Provisioning
//Platform=Azure
//Maturity level=Complete

:toc: macro
toc::[]
:idprefix:
:idseparator: -

== Provisioning Platforms

=== Azure

==== Overview

This chapter lists major features/ concrete services for provisioning of the Azure platform. This architecture pattern builds on the general problem description for monitoring. The picture below summarizes major services and concepts that are discussed in detail in the next chpater.

image::provisioning_azure.png[Provisioning Azure Overview, width=966, height=526]

==== Automation code

===== Modelling Environments

Azure provides the following structural elements to model an environment:

* *Resource groups:* Smallest possible container
* *Subscriptions:* One subscription can contain many resource groups. With a subscription discounts for dev/ test environments are possible.
* *Management groups:* One management group can contain many subscriptions. They can be used enforce policies across subscriptions if environments share common characteristics.

An environment can be linked to another environment. Linking an environment to multiple environment is beneficial for addressing cross concerns such as monitoring (Similar to Hub/ Spoke topology in networks).

===== Pipeline Implementation

The programming approach can be either UI driven or *programmatic*. Pipeline programming languages such as YAML structure the actions to be performed by the pipeline and provide basic mechansims such as downloading code from the repo, parameter handling, stating triggers and triggering other programming languages. These other languages are then used to setup infrastructure such as terraform or deploying application code.

Azure allows to https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?view=azure-devops[*trigger* pipelines] upon:

* a push to repo
* a pull request to repo
* a schedule
* a pipeline completion

The platform allows to *pass parameters* by various mechanisms to pipelines(Explicit per user input, programmatically). Parameters can be passed by group identifier or explicitly as key value pairs. Complex structured objects as known from object programming languages are not directly possible (Require parsing of files with object structure). Parametrization might be constrained by the used service in certain areas.

The platform provides *support for quality gates* as follows:

* Static code analysis
+
Microsoft does not provide own tools for static code analysis but allows integration of others.
* Automated tests (Unit, Integration, End-To-End)
+
Microsoft provides services that include test management e.g. creating test suites with test cases and getting an overview about the results.
* Approval
+
Azure services support approval for a certain environments and enforcing pull requests as quality gates.

The Azure platform provides the following basic options to *store* automation code:

* Services that provide repositories
* Integration of various external code repositories

===== Orchestration

To *orchestrate* pipelines the two following basic mechanisms can be used:

* Implicit Chaining
+
In that case the complete workflow is not explicitly coded in a dedicated pipeline. Pipelines are chained implicitly by triggering events. The biggest problem with that approach is the missing single pane of control. The current state in the overall workflow is for instance only implicitly given by the currently running pipeline.

* Creating a dedicated orchestration pipeline
+
An additional pipeline triggers in this scenario other pipelines acting as building blocks. Pipelines can run separately (just run the deployment) or as part of a bigger workflow (e.g. create environment from scratch).

Orchestration must take dependencies into account. They might result from the deployed code or the scope of the pipeline (scope is e.g. a single microservice and code includes the libraries neede).
Orchestrated pipelines must pass data between them. The recommended method is to use key vault.

*Recreation of resources in short intervals* can cause pipelines to fail since the previously deleted resource still exists in the background.(Even although soft delete is not applicable). Whether Azure really deleted everything depends on the service. For instance Azure API management seemed to be affected by that problem.

===== Traceability

*Traceability* requires an identifier for referencing artefacts. A standard schema is a semantic version. The platform only supports partial support for number generation such as https://ychetankumarsarma.medium.com/build-versioning-in-azure-devops-pipelines-94b5a79f80a0[incrementing numbers]. Linking the code in the repo to a certain version depends on used repository. 

==== Infrastructure/ Application code

A *programming language* is either "declarative" or "imperative". Declarative programming languages state the target state and it is the job of the declarative programming language how to get there. The following rules are applied to achieve that:

* create a resource if not there
* update an existing resource if different properties
* delete resource if not there

Imperative programming languages state the how. The internal delta calculation needs to be explicitly programmed here. If possible declarative programming languages are recommended due to automatic delta calculation. Typical case is infrastructure.

Typical declarative options are shown in detail in the table below. The overall recommendation is to go for terraform. Major reasons for downvoting Bicep/ ARM:

* ARM: difficult readability for humans
* Bicep: Lack of support for testing based on plan and testing ecosystem since first added recently.

Table with declarative programming language options:
[options="header"]
|=======================
|Criteria|Bicep      |ARM | Terraform
|Same syntax across clouds |- (Azure Only)     |- (Azure Only)   |+ (multi)
|What if    |o (no complete prop list;only display of plan; unexpected delete)     |- (not available)   |+ (plan command)
|Detection current    |o (Real anaylsis but time)     |+ (Real anaylsis)   |o (Statefile)
|Testing/ static analysis    |o (Only via ARM)|+ (available)   |+ (available)
|Human Readability    |+ |- |+
|Reverse Engineering    |- (Extra ARM step + adjust) |o (adjust) |+ (Direct via Terraformer)
|Latest features    |o (No embedded fallback) |+ (native) |o (Time lag but embedded fallback)
|=======================

The major options for imperative programming languages are Azure CLI, Powershell (Windows) or Linux based scripting. Azure CLI is recommended as prefered choice since it works on linux and windows based VMs.

The created resources should follow a *uniform naming schema*. This requires naming to be factored out in a centralized module. Terraform supports factoring out common code in modules. However the backend must already exist and should also follow a naming convention. The recommendation is therefore to expose the common terraform module via an additional path that does not require a backend to determine the names for the azure resources representing the backend. 

==== Provisioning
===== Organizational Mapping

The provisioning must match the organizational requirements of your organization. Azure provides services to model sub units within your organization such as departments, projects and teams.

===== Integration

Platform allows a modular approach to outsource certain functionality to third party software such as code repository. Which parts is service specific.

External tools providing pipelines can be integrated in two conceptual ways:

* *Trigger automation pipelines from external:* This involves the configuration of a CI pipeline in the external tool such as Jenkins and mechanism in the automation service that invokes the CI process when source code is pushed to a repository or a branch.
* *Run external pipelines from within the platform:* In this approach automation reaches out to an external tool to work with the results.

===== Configuration

Configuration for provisioning is required in various areas:

* *Environment:* E.g. name of resource group per potential target environment
* *Repository:* E.g. relevant repos/ branching
* *Pipelines:* Parameters pipelines run with such as the technical user name or settings required by the built/ deployed code.

Concrete features used for the above three points depend on the used services. A general storage for sensitive data (keys, secrets, certificates) in Azure is always Azure Key Vault.

===== Compliance

The standard concept for role-based access controls is called RBAC in Azure. It assigns principals (humans or technical accounts) permissions for a certain resource. Regarding provisioning the following users are relevant:

* Technical user (service principal) the pipelines are running with
* Users for administrating the provisioning service

Azure Active Directory is the central service in Azure that defines and controls all principals (human/ service) per tenant.

Granularity of roles that can be granted depend on the service. The boundaries in which users exist or permissions can be assigned is also service specific.


== Credits

image::ms_guild_logo.png[MS Guild Logo, width=160, height=75, align=right, link="https://forms.office.com/Pages/ResponsePage.aspx?id=Wq6idgCfa0-V7V0z13xNYal7m2EdcFdNsyBBMUiro4NUNllHQTlPNU9QV1JRRjk3TTAwVUJCNThTRSQlQCN0PWcu"]
